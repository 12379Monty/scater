?scale_color_manual
source('~/Dropbox/Projects/scater/R/qc.R')
plotQC(example_sceset, type = "find-pcs", variable = "Treatment",
plot_type = "pairs-pcs")
source('~/Dropbox/Projects/scater/R/qc.R')
plotQC(example_sceset, type = "find-pcs", variable = "Treatment",
plot_type = "pairs-pcs")
debug(findImportantPCs)
plotQC(example_sceset, type = "find-pcs", variable = "Treatment",
plot_type = "pairs-pcs")
gg1
head(gg1$all)
df_to_plot_big
head(df_to_plot_big0
)
head(df_to_plot_big)
plot_out
source('~/Dropbox/Projects/scater/R/qc.R')
plotQC(example_sceset, type = "find-pcs", variable = "Treatment",
plot_type = "pairs-pcs")
plotQC(example_sceset, type = "find-pcs", variable = "coverage",
plot_type = "pairs-pcs")
plotQC(example_sceset, type = "find-pcs", variable = "Cell_Cycle",
plot_type = "pairs-pcs")
debug(findImportantPCs)
plotQC(example_sceset, type = "find-pcs", variable = "Treatment",
plot_type = "pairs-pcs")
plot_out
plot_out + ggthemes::scale_color_tableau()
variable <- "treatment"
plot_out + ggthemes::scale_color_tableau(name = get("variable"))
plot_out + viridis::scale_color_viridis(name = get("variable"), discrete = TRUE)
typeof_x
typeof_x == "discrete"
source('~/Dropbox/Projects/scater/R/qc.R')
plotQC(example_sceset, type = "find-pcs", variable = "Treatment",
plot_type = "pairs-pcs")
plotQC(example_sceset, type = "find-pcs", variable = "Treatment",
plot_type = "pairs-pcs", theme_size = 20)
plotQC(example_sceset, type = "find-pcs", variable = "Treatment",
plot_type = "pairs-pcs", theme_size = 20) + theme_cowplot()
plotQC(example_sceset, type = "find-pcs", variable = "coverage",
plot_type = "pairs-pcs")
source('~/Dropbox/Projects/scater/R/qc.R')
plotQC(example_sceset, type = "find-pcs", variable = "coverage",
plot_type = "pairs-pcs")
source('~/Dropbox/Projects/scater/R/qc.R')
plotQC(example_sceset, type = "find-pcs", variable = "Treatment",
plot_type = "pairs-pcs", theme_size = 20)
plotQC(example_sceset, type = "find-pcs", variable = "coverage",
plot_type = "pairs-pcs")
plotQC(example_sceset, type = "find-pcs", variable = "Cell_Cycle",
plot_type = "pairs-pcs")
source('~/Dropbox/Projects/scater/R/qc.R')
plotQC(example_sceset, type = "find-pcs", variable = "coverage",
plot_type = "pairs-pcs")
plotQC(example_sceset, type = "expl", method = "pairs")
library(scater)
source('~/Dropbox/Projects/scater/R/qc.R')
plotQC(example_sceset, type = "expl")
?message
source('~/Dropbox/Projects/scater/R/qc.R')
plotQC(example_sceset, type = "expl")
plotQC(example_sceset, type = "expl",
variables = c("coverage", "depth", "Mutation_Status", "Treatment",
"Cell_Cycle"))
plotQC(example_sceset, type = "expl", method = "pairs")
?facet_grid
plotQC(example_sceset, type = "find-pcs", variable = "coverage",
plot_type = "pairs-pcs")
source('~/Dropbox/Projects/scater/R/qc.R')
plotQC(example_sceset, type = "expl", method = "pairs")
plotQC(example_sceset, type = "expl", method = "pairs", theme_size = 6)
source('~/Dropbox/Projects/scater/R/qc.R')
plotQC(example_sceset, type = "expl", method = "pairs", theme_size = 6)
source('~/Dropbox/Projects/scater/R/qc.R')
plotQC(example_sceset, type = "expl", method = "pairs", theme_size = 6)
debug(plotExplanatoryVariables)
plotQC(example_sceset, type = "expl", method = "pairs", theme_size = 6)
gg1$densities
ls()
debug(plotExplanatoryVariables)
plotQC(example_sceset, type = "expl", method = "pairs", theme_size = 6)
source('~/Dropbox/Projects/scater/R/qc.R')
debug(plotExplanatoryVariables)
plotQC(example_sceset, type = "expl", method = "pairs", theme_size = 6)
str(gg1)
unique(gg1$all$xvar)
val <- unique(gg1$all$xvar)[1]
val
x <- gg1$all$x[gg1$all$xvar == val]
length(gg1$densities$x)
length(gg1$all$x)
gg1$densities$scales <- rep(0, nrow(gg1$densities))
gg1$densities$scales
for (val in unique(gg1$densities$xvar)) {
idx <- gg1$densities$xvar == val
x <- gg1$densities$x[idx]
gg1$densities$scales[idx] <- diff(range(x)) + min(x)
}
gg1$densities$scales
source('~/Dropbox/Projects/scater/R/qc.R')
plotQC(example_sceset, type = "expl", method = "pairs", theme_size = 6)
traceback()
debugSource('~/Dropbox/Projects/scater/R/qc.R')
plotQC(example_sceset, type = "expl", method = "pairs", theme_size = 6)
debug(plotExplanatoryVariables)
plotQC(example_sceset, type = "expl", method = "pairs", theme_size = 6)
dim(gg1)
dim(gg1$densities)
names(gg1$densities)
dim(gg1$densities)
names(gg1$densities)
gg1$densities$scales
names(gg1$densities)
source('~/Dropbox/Projects/scater/R/qc.R')
plotQC(example_sceset, type = "expl", method = "pairs", theme_size = 6)
source('~/Dropbox/Projects/scater/R/qc.R')
plotQC(example_sceset, type = "expl", method = "pairs", theme_size = 6)
source('~/Dropbox/Projects/scater/R/qc.R')
plotQC(example_sceset, type = "expl", method = "pairs", theme_size = 6)
source('~/Dropbox/Projects/scater/R/qc.R')
plotQC(example_sceset, type = "expl", method = "pairs", theme_size = 6)
?geom_text
?annotate
debug(plotExplanatoryVariables)
plotQC(example_sceset, type = "expl", method = "pairs", theme_size = 6)
source('~/Dropbox/Projects/scater/R/qc.R')
debug(plotExplanatoryVariables)
plotQC(example_sceset, type = "expl", method = "pairs", theme_size = 6)
stat_density(
aes_string(x = "x", y = "..scaled.. * scale_factor"),
data = gg1$densities, position = "identity",
colour = "grey20", geom = "line")
?geom_text
source('~/Dropbox/Projects/scater/R/qc.R')
debug(plotExplanatoryVariables)
plotQC(example_sceset, type = "expl", method = "pairs", theme_size = 6)
plot_out <- ggplot(gg1$all, aes_string(x = "x", y = "y")) +
geom_point(fill = "gray60", colour = "gray40",
shape = 21, alpha = 0.65) +
facet_grid(xvar ~ yvar, scales = "free")
plot_out
plot_out + geom_text(aes_string(x = "xvar", y = "yvar", label = "label"),
data = gg1$diags)
gg1$diags <- data.frame(xvar = colnames(val_to_plot_mat),
yvar = colnames(val_to_plot_mat),
label = paste0("Med. R-sq = ",
formatC(signif(100*median_rsquared,
digits = 3),  digits = 3,
format = "fg", flag = "#"), "%)"))
plot_out + geom_text(aes_string(x = "xvar", y = "yvar", label = "label"),
data = gg1$diags)
dim(df_to_expand)
colMeans(df_to_expand)
gg1$diags <- data.frame(xvar = colnames(val_to_plot_mat),
yvar = colnames(val_to_plot_mat),
x = colMeans(df_to_expand),
y = colMeans(df_to_expand),
label = paste0("Med. R-sq = ",
formatC(signif(100*median_rsquared,
digits = 3),  digits = 3,
format = "fg", flag = "#"), "%)"))
colnames(val_to_plot_mat)
gg1$diags <- data.frame(xvar = colnames(df_to_expand),
yvar = colnames(df_to_expand),
x = colMeans(df_to_expand),
y = colMeans(df_to_expand),
label = paste0("Med. R-sq = ",
formatC(signif(100*median_rsquared,
digits = 3),  digits = 3,
format = "fg", flag = "#"), "%)"))
?strsplit
gsub(")", "", strsplit("\n(", colnames(df_to_expand))[2])
strsplit("\n(", colnames(df_to_expand))
colnames(df_to_expand)
strsplit(colnames(df_to_expand), "\n(")
strsplit(colnames(df_to_expand), "\\n(")
strsplit(colnames(df_to_expand), "\\n\\(")
gsub(")", "", lapply(strsplit(colnames(df_to_expand), "\\n\\("), function(x) x[2]))
diag_labs <-  paste0("Med. R-sq = ",
formatC(signif(100*median_rsquared, digits = 3),
digits = 3, format = "fg", flag = "#"),
"%")[oo_median[1:nvars_to_plot]]
gg1$diags <- data.frame(xvar = colnames(df_to_expand),
yvar = colnames(df_to_expand),
x = colMeans(df_to_expand),
y = colMeans(df_to_expand),
label = diag_labs)
plot_out + geom_text(aes_string(x = "xvar", y = "yvar", label = "label"),
data = gg1$diags)
plot_out + geom_text(aes_string(x = "x", y = "y", label = "label"),
data = gg1$diags)
plot_out + geom_text(aes_string(x = "x", y = "y", label = "label"),
data = gg1$diags) + theme_bw(theme_size)
colMax(df_to_expand)
apply(df_to_expand, 2, max)
apply(df_to_expand, 2, range)
apply(df_to_expand, 2, function(x) {diff(range(x)) + min(x)})
apply(df_to_expand, 2, function(x) {diff(range(x))/2 + min(x)})
diag_labs <-  paste0("Med. R-sq = ",
formatC(signif(100*median_rsquared, digits = 3),
digits = 3, format = "fg", flag = "#"),
"%")[oo_median[1:nvars_to_plot]]
centres <- apply(df_to_expand, 2,
function(x) {diff(range(x))/2 + min(x)})
gg1$diags <- data.frame(xvar = colnames(df_to_expand),
yvar = colnames(df_to_expand),
x = centres, y = centres,
label = diag_labs)
plot_out + geom_text(aes_string(x = "x", y = "y", label = "label"),
data = gg1$diags) + theme_bw(theme_size)
?geom_text
plot_out + geom_text(aes_string(x = "x", y = "y", label = "label"),
data = gg1$diags, size = theme_size) + theme_bw(theme_size)
theme_size
p <- ggplot(mtcars, aes(x=wt, y=mpg, label=rownames(mtcars)))
p + geom_text(fontface=3)
plot_out + geom_text(aes_string(x = "x", y = "y", label = "label", size = theme_size),
data = gg1$diags) + theme_bw(theme_size)
diag_labs <-  paste0("Med. R-sq = \n",
formatC(signif(100*median_rsquared, digits = 3),
digits = 3, format = "fg", flag = "#"),
"%")[oo_median[1:nvars_to_plot]]
centres <- apply(df_to_expand, 2,
function(x) {diff(range(x))/2 + min(x)})
gg1$diags <- data.frame(xvar = colnames(df_to_expand),
yvar = colnames(df_to_expand),
x = centres, y = centres,
label = diag_labs)
plot_out <- ggplot(gg1$all, aes_string(x = "x", y = "y")) +
geom_point(fill = "gray60", colour = "gray40",
shape = 21, alpha = 0.65) +
facet_grid(xvar ~ yvar, scales = "free") +
#             stat_density(aes_string(x = "x",
#                                     y = "(..scaled.. * diff(range(x)) + min(x))"),
#                          data = gg1$densities, position = "identity",
#                          colour = "grey20", geom = "line") +
geom_text(aes_string(x = "x", y = "y", label = "label",
size = theme_size), data = gg1$diags)
plot_out + geom_text(aes_string(x = "x", y = "y", label = "label", size = theme_size),
data = gg1$diags)
source('~/Dropbox/Projects/scater/R/qc.R')
plotQC(example_sceset, type = "expl", method = "pairs", theme_size = 6)
source('~/Dropbox/Projects/scater/R/qc.R')
plotQC(example_sceset, type = "expl", method = "pairs", theme_size = 6)
?show_guides
?scale_label
?scale_labels
source('~/Dropbox/Projects/scater/R/qc.R')
plotQC(example_sceset, type = "expl", method = "pairs", theme_size = 6)
source('~/Dropbox/Projects/scater/R/qc.R')
plotQC(example_sceset, type = "expl", method = "pairs", theme_size = 6)
source('~/Dropbox/Projects/scater/R/qc.R')
plotQC(example_sceset, type = "expl", method = "pairs", theme_size = 6)
?geom_rect
source('~/Dropbox/Projects/scater/R/qc.R')
plotQC(example_sceset, type = "expl", method = "pairs", theme_size = 6)
source('~/Dropbox/Projects/scater/R/qc.R')
plotQC(example_sceset, type = "expl", method = "pairs", theme_size = 6)
library(scater)
data("sc_example_counts")
data("sc_example_cell_info")
pd <- new("AnnotatedDataFrame", data = sc_example_cell_info)
rownames(pd) <- pd$Cell
example_sceset <- newSCESet(countData = sc_example_counts, phenoData = pd)
keep_feature <- rowSums(is_exprs(example_sceset)) > 0
example_sceset <- example_sceset[keep_feature,]
example_sceset <- calculateQCMetrics(example_sceset, feature_controls = 1:40)
pd <- new("AnnotatedDataFrame", data = sc_example_cell_info)
rownames(pd) <- pd$Cell
gene_df <- data.frame(Gene = rownames(sc_example_counts))
rownames(gene_df) <- gene_df$Gene
fd <- new("AnnotatedDataFrame", data = gene_df)
example_sceset <- newSCESet(countData = sc_example_counts, phenoData = pd,
featureData = fd)
example_sceset
plot(example_sceset)
plot(example_sceset, block1 = "Mutation_Status", block2 = "Treatment",
colour_by = "Cell_Cycle", nfeatures = 300, use_as_exprs = "counts")
plotExpression(example_sceset, rownames(example_sceset)[1:6],
x = "Mutation_Status", use_as_expr = "exprs")
plotExpression(example_sceset, rownames(example_sceset)[7:12],
x = "Mutation_Status", use_as_expr = "exprs", colour = "Cell_Cycle",
show_median = FALSE, show_violin = TRUE,  xlab = "Mutation Status")
example_sceset <- calculateQCMetrics(example_sceset, feature_controls = 1:20)
varLabels(example_sceset)
example_sceset <- calculateQCMetrics(
example_sceset, feature_controls = list(controls1 = 1:20, controls2 = 500:1000),
cell_controls = list(set_1 = 1:5, set_2 = 31:40))
varLabels(example_sceset)
keep_feature <- rowSums(is_exprs(example_sceset)) > 4
example_sceset <- example_sceset[keep_feature,]
## Plot QC
plotQC(example_sceset, type = "highest-expression")
p1 <- plotQC(example_sceset, type = "highest-expression", use_as_exprs = "exprs")
p2 <- plotQC(example_sceset, type = "highest-expression", use_as_exprs = "tpm")
multiplot(p1, p2, cols = 2)
p1 <- plotQC(example_sceset[, !example_sceset$is_cell_control],
type = "highest-expression")
p2 <- plotQC(example_sceset[, example_sceset$is_cell_control],
type = "highest-expression")
multiplot(p1, p2, cols = 2)
plotQC(example_sceset, type = "exprs-freq-vs-mean")
feature_set_1 <- fData(example_sceset)$is_feature_control_controls1
plotQC(example_sceset, type = "exprs-freq-vs-mean", feature_set = feature_set_1)
plotFeatureData(example_sceset, aes(x = n_cells_exprs, y = pct_total_counts))
plotPhenoData(example_sceset, aes(x = depth, y = coverage,
colour = Mutation_Status))
plotPhenoData(example_sceset, aes(x = Mutation_Status, y = coverage,
colour = log10(depth)))
plotPhenoData
rm(list = ls())
library(scater)
plotPhenoData
plotMetadata
is.numeric(1L)
is.numeric(1.000001)
is.numeric("string")
is.numeric(factor(1))
data("sc_example_counts")
data("sc_example_cell_info")
pd <- new("AnnotatedDataFrame", data = sc_example_cell_info)
rownames(pd) <- pd$Cell
example_sceset <- newSCESet(countData = sc_example_counts, phenoData = pd)
keep_feature <- rowSums(is_exprs(example_sceset)) > 0
example_sceset <- example_sceset[keep_feature,]
example_sceset <- calculateQCMetrics(example_sceset, feature_controls = 1:40)
pd <- new("AnnotatedDataFrame", data = sc_example_cell_info)
rownames(pd) <- pd$Cell
gene_df <- data.frame(Gene = rownames(sc_example_counts))
rownames(gene_df) <- gene_df$Gene
fd <- new("AnnotatedDataFrame", data = gene_df)
example_sceset <- newSCESet(countData = sc_example_counts, phenoData = pd,
featureData = fd)
example_sceset
plot(example_sceset, block1 = "Mutation_Status", block2 = "Treatment",
colour_by = "Cell_Cycle", nfeatures = 300, use_as_exprs = "counts")
plotFeatureData(example_sceset, aes(x = n_cells_exprs, y = pct_total_counts))
example_sceset <- calculateQCMetrics(
example_sceset, feature_controls = list(controls1 = 1:20, controls2 = 500:1000),
cell_controls = list(set_1 = 1:5, set_2 = 31:40))
varLabels(example_sceset)
plotQC(example_sceset, type = "exprs-freq-vs-mean")
feature_set_1 <- fData(example_sceset)$is_feature_control_controls1
plotQC(example_sceset, type = "exprs-freq-vs-mean", feature_set = feature_set_1)
plotFeatureData(example_sceset, aes(x = n_cells_exprs, y = pct_total_counts))
plotPhenoData(example_sceset, aes(x = depth, y = coverage,
colour = Mutation_Status))
plotPhenoData(example_sceset, aes(x = Mutation_Status, y = coverage,
colour = log10(depth)))
plotMetadata
debug(plotMetadata)
plotPhenoData(example_sceset, aes(x = Mutation_Status, y = coverage,
colour = log10(depth)))
library(scater)
plotPhenoData(example_sceset, aes(x = Mutation_Status, y = coverage,
colour = log10(depth)))
library(scater)
plotPhenoData(example_sceset, aes(x = Mutation_Status, y = coverage,
colour = log10(depth)))
library(scater)
plotPhenoData(example_sceset, aes(x = Mutation_Status, y = coverage,
colour = log10(depth)))
debug(plotMetadata)
plotPhenoData(example_sceset, aes(x = Mutation_Status, y = coverage,
colour = log10(depth)))
plot_out
names(aesth)
"colour" %in% aesth
aesth
library(scater)
plotPhenoData(example_sceset, aes(x = Mutation_Status, y = coverage,
colour = log10(depth)))
debug(plotMetadata)
plotPhenoData(example_sceset, aes(x = Mutation_Status, y = coverage,
colour = log10(depth)))
is.null(aesth$colour)
aesth$colour
as.character(aesth$colour)
names(object)
str(plot_out)
undebug(plotMetadata)
plotPhenoData(example_sceset, aes(x = Mutation_Status, y = coverage,
colour = log10_depth))
library(scater)
plotPhenoData(example_sceset, aes(x = Mutation_Status, y = coverage,
colour = log10_depth))
plotPhenoData(example_sceset, aes(x = depth, y = coverage,
colour = Gene_1000))
plotPhenoData(example_sceset, aes(x = depth, y = coverage,
colour = Gene_0500))
plotPhenoData(example_sceset, aes(x = depth, y = coverage,
colour = Mutation_Status)) +
theme(legend.position = "top")
plotPhenoData(example_sceset, aes(x = pct_exprs_from_feature_counts, y = coverage,
colour = Gene_0500))
varLabels(example_sceset)
plotPhenoData(example_sceset, aes(x = pct_exprs_from_feature_controls,
y = coverage, colour = Gene_0500))
plotPhenoData(example_sceset, aes(x = pct_exprs_from_feature_controls,
y = pct_exprs_from_top_50_features,
colour = Gene_0001))
library(scater)
plotPhenoData(example_sceset, aes(x = pct_exprs_from_feature_controls,
y = pct_exprs_from_top_50_features,
colour = Gene_0001))
plotPhenoData(example_sceset, aes(x = pct_exprs_from_feature_controls,
y = coverage, colour = Gene_0500))
plotPhenoData(example_sceset, aes(x = depth, y = coverage,
colour = Gene_1000))
plotPhenoData(example_sceset, aes(x = Mutation_Status, y = coverage,
colour = log10_depth))
plotPhenoData(example_sceset, aes(x = depth, y = coverage,
colour = Mutation_Status))
plotPhenoData(example_sceset, aes(x = depth, y = coverage,
colour = Mutation_Status)) +
theme(legend.position = "top")
plotPhenoData(example_sceset, aes(x = pct_exprs_from_feature_controls,
y = coverage, colour = Mutation_Status)) +
theme(legend.position = "top") +
stat_smooth(method = "lm", se = FALSE, size = 2, fullrange = TRUE)
plotPhenoData(example_sceset, aes(x = coverage,
y = log10_exprs_from_feature_controls,
colour = Mutation_Status)) +
theme(legend.position = "top") +
stat_smooth(method = "lm", se = FALSE, size = 2, fullrange = TRUE)
plotPhenoData(example_sceset, aes(x = log10_exprs_from_feature_controls,
y = coverage, colour = Mutation_Status)) +
theme(legend.position = "top") +
stat_smooth(method = "lm", se = FALSE, size = 2, fullrange = TRUE)
plotPCA(example_sceset)
plotPCA(example_sceset, feature_set = fData(example_sceset)$is_feature_control)
plotPCA(example_sceset, ncomponents = 4, colour_by = "Treatment",
shape_by = "Mutation_Status")
plotPCA(example_sceset, colour_by = "Gene_0001", size_by = "Gene_1000")
plotPCA(example_sceset, size_by = "Gene_1000")
library(scater)
?newSCESet
install.packages("forecast")
library(forecast)
grangertest
install.packges("lmtest")
install.packages("lmtest")
library(lmtest)
?read.table
library(scater)
?newSCESet
?plotTSNE
?getBMFeatureAnnos
?lmtest
library(lmtest)
?lmtest
?data
?attach
?ndiffs
?grangertest
?plot.ts
?ChickEgg
?ndiffs
?time.series
?forecast
?ts
install.packages(cts)
install.packages("cts")
library(cts)
?cts
??cts
browseVignettes("cts")
load("/Users/davis/Dropbox/Projects/ebi_001_hipsci_trans-eqtls/data/stably_selected_variants.RDS.RData")
stably_selected_variants <- read.delim("/Users/davis/Dropbox/Projects/ebi_001_hipsci_trans-eqtls/data/stably_selected_variants.tsv", stringsAsFactors = FALSE)
show(stably_selected_variants)
View(stably_selected_variants)
browseVignettes('scater')
browseVignettes()
ls()
example_sceset
plotExpression(example_sceset, rownames(example_sceset)[1:6],
x = "Mutation_Status", use_as_expr = "exprs")
library(scater)
plotExpression(example_sceset, rownames(example_sceset)[1:6],
x = "Mutation_Status", use_as_expr = "exprs")
keep_feature <- rowSums(is_exprs(example_sceset)) > 4
example_sceset <- example_sceset[keep_feature,]
## Plot QC
plotQC(example_sceset, type = "highest-expression")
p1 <- plotQC(example_sceset, type = "highest-expression", use_as_exprs = "exprs")
p2 <- plotQC(example_sceset, type = "highest-expression", use_as_exprs = "tpm")
multiplot(p1, p2, cols = 2)
plotQC(example_sceset, type = "exprs-freq-vs-mean")
plotFeatureData(example_sceset, aes(x = n_cells_exprs, y = pct_total_counts))
```
plotPhenoData(example_sceset, aes(x = depth, y = coverage,
colour = Mutation_Status))
plotPCA(example_sceset)
plotTSNE(example_sceset, colour_by = "Treatment", shape_by = "Mutation_Status")
```
ls()
install.packages("shiny")
shiny::runApp('R')
library(BiocCheck)
?BiocCheck
BiocCheck('../scater/')
library(scater)
ls()
example_sceset@assayData
example_sceset@assayData$counts
library(shiny)
runApp("../scater/")
runApp("R")
runApp("R", display.mode = "showcase")
shiny::runApp('R')
